# =================================================================
# telefonicaid/fiware
# =================================================================
version: "3.8"
services:
  #Orion Context Broker for Fiware. 
  #
  # References: 
  #   - http://fiware.github.io/specifications/ngsiv2/stable/
  #   - https://github.com/telefonicaid/fiware-orion/ 
  #
  orion:
    labels:
      com.wordpress.fcosfc: 'fiware_arduino' # The name of the service (Project) we use this instead of 'tutorial'
    image: fiware/orion:${ORION_VERSION}
    hostname: orion
    container_name: fiware-orion
    depends_on:
      - mongo-db
    networks:
      - default
    ports:
      - "${ORION_PORT}:${ORION_PORT}" # Ports are allocated in the .env file
    command: -dbhost mongo-db -logLevel DEBUG -noCache
    healthcheck:
      test: curl --fail -s http://orion:${ORION_PORT}/version || exit 1
      interval: 15s
  #IOT agent
  iot-agent:
    labels:
      com.wordpress.fcosfc: 'fiware_arduino'
    image: fiware/iotagent-ul:${ULTRALIGHT_VERSION}
    hostname: iot-agent
    container_name: fiware-iot-agent
    depends_on:
      - mongo-db
      - mosquitto
    networks:
      - default
    expose:
      - "${IOTA_NORTH_PORT}"
    ports:
      - "${IOTA_NORTH_PORT}:${IOTA_NORTH_PORT}" 
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_CB_PORT=${ORION_PORT} # port the context broker listens on to update context
      - IOTA_NORTH_PORT=${IOTA_NORTH_PORT}
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=${MONGO_DB_PORT} # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
      - IOTA_MQTT_HOST=mosquitto # The host name of the MQTT Broker
      - IOTA_MQTT_PORT=${MOSQUITTO_PORT} # The port the MQTT Broker is listening on to receive topics
      - IOTA_DEFAULT_RESOURCE= # Default is blank. I'm using MQTT so I don't need a resource
      - IOTA_PROVIDER_URL=http://iot-agent:${IOTA_NORTH_PORT}
      - IOTA_DEFAULT_TRANSPORT=MQTT
    healthcheck:
      interval: 10s
# =================================================================
# Other services
# =================================================================    
  #Telegraf
  # Reference: https://www.influxdata.com/time-series-platform/telegraf/ 
  #
  telegraf:
    labels:
      com.wordpress.fcosfc: 'fiware_arduino'
    image: telegraf:${TELEGRAF_VERSION}
    hostname: telegraf
    container_name: telegraf
    expose:
      - "${TELEGRAF_PORT}"
    ports:
      - "${TELEGRAF_PORT}:${TELEGRAF_PORT}"
    volumes:
      - ../config/telegraf.conf:/etc/telegraf/telegraf.conf
    depends_on: 
      - influxdb
    networks:
      - default

  #MQTT Broker
  #   - https://mqtt.org/
  #   - https://mosquitto.org/ 
  mosquitto:
    labels:
      com.wordpress.fcosfc: 'fiware_arduino'
    image: eclipse-mosquitto:${MOSQUITTO_VERSION}
    hostname: mosquitto
    container_name: mosquitto
    expose:
      - "${MOSQUITTO_PORT}"
    ports:
      - "${MOSQUITTO_PORT}:${MOSQUITTO_PORT}"
    volumes:
      #HOSTNAME config file           DOCKER IMAGE config path
      - ../config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_data:/mosquitto/data 
      - mosquitto_log:/mosquitto/log 
    networks:
      - default


# =================================================================
# Databases
# =================================================================
  #Mongo db database for fiware
  mongo-db:
    labels:
      com.wordpress.fcosfc: 'fiware_arduino' # The name of the project
    image: mongo:${MONGO_DB_VERSION}
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "${MONGO_DB_PORT}"
    ports:
      - "${MONGO_DB_PORT}:${MONGO_DB_PORT}" 
    networks:
      - default
    volumes:
      - mongo-db:/data
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`; 
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
      interval: 15s
  
  #Main IOT database
  influxdb:
    labels:
      com.wordpress.fcosfc: 'fiware_arduino'
    image: influxdb:${INFLUXDB_VERSION}
    hostname: influxdb
    container_name: influxdb
    expose:
      - "${INFLUXDB_PORT}"
    ports:
      - "${INFLUXDB_PORT}:${INFLUXDB_PORT}"
    volumes:
      - influxdb_data:/var/lib/influxdb
    environment:
      - INFLUXDB_DB=${INFLUXDB_DB}
      - INFLUXDB_HTTP_AUTH_ENABLED=false
    networks:
      - default
    healthcheck:
      test: curl --fail -s http://influxdb:${INFLUXDB_PORT}/ping || exit 1
      interval: 15s
  # Grafana Dashboard
  grafana:
    labels:
      com.wordpress.fcosfc: 'fiware_arduino'
    image: grafana/grafana:${GRAFANA_VERSION}
    hostname: grafana
    container_name: grafana
    expose:
      - "${GRAFANA_PORT}"
    ports:
      - ${GRAFANA_PORT}:${GRAFANA_PORT}
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/temperature-dashboard.json
    volumes:
      - grafana_data:/var/lib/grafana
      - ../grafana/:/etc/grafana/provisioning
    depends_on:
      - influxdb
    networks:
      - default
networks:
  default:
    labels:
      com.wordpress.fcosfc: 'fiware_arduino'
    ipam:
      config:
        - subnet: 172.18.1.0/24
#All images for Docker
volumes:
  mongo-db:
  mosquitto_data:
  mosquitto_log:
  influxdb_data:
  grafana_data: